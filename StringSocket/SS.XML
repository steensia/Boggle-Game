<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SS</name>
    </assembly>
    <members>
        <member name="T:CustomNetworking.SendCallback">
            <summary>
            The type of delegate that is called when a SS send has completed.
            </summary>
        </member>
        <member name="T:CustomNetworking.ReceiveCallback">
            <summary>
            The type of delegate that is called when a receive has completed.
            </summary>
        </member>
        <member name="T:CustomNetworking.SS">
             <summary> 
             A SS is a wrapper around a Socket.  It provides methods that
             asynchronously read lines of text (strings terminated by newlines) and 
             write strings. (As opposed to Sockets, which read and write raw bytes.)  
            
             SSs are thread safe.  This means that two or more threads may
             invoke methods on a shared SS without restriction.  The
             SS takes care of the synchronization.
             
             Each SS contains a Socket object that is provided by the client.  
             A SS will work properly only if the client refrains from calling
             the contained Socket's read and write methods.
             
             We can write a string to a SS ss by doing
             
                ss.BeginSend("Hello world", callback, payload);
                
             where callback is a SendCallback (see below) and payload is an arbitrary object.
             This is a non-blocking, asynchronous operation.  When the SS has 
             successfully written the string to the underlying Socket, or failed in the 
             attempt, it invokes the callback.  The parameter to the callback is the payload.  
             
             We can read a string from a SS ss by doing
             
                 ss.BeginReceive(callback, payload)
                 
             where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
             This is non-blocking, asynchronous operation.  When the SS has read a
             string of text terminated by a newline character from the underlying Socket, or
             failed in the attempt, it invokes the callback.  The parameters to the callback are
             a string and the payload.  The string is the requested string (with the newline removed).
             </summary>
        </member>
        <member name="T:CustomNetworking.SS.SendRequest">
            <summary>
            Contains information about a single queued send request
            </summary>
        </member>
        <member name="T:CustomNetworking.SS.ReceiveRequest">
            <summary>
            Contains information about a singe queued receive request.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.#ctor(System.Net.Sockets.Socket,System.Text.Encoding)">
            <summary>
            Creates a SS from a regular Socket, which should already be connected.  
            The read and write methods of the regular Socket must not be called after the
            SS is created.  Otherwise, the SS will not behave properly.  
            The encoding to use to convert between raw bytes and strings is also provided.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down this SS.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.Close">
            <summary>
            Closes this SS.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.BeginSend(System.String,CustomNetworking.SendCallback,System.Object)">
             <summary>
             We can write a string to a SS ss by doing
             
                ss.BeginSend("Hello world", callback, payload);
                
             where callback is a SendCallback (see below) and payload is an arbitrary object.
             This is a non-blocking, asynchronous operation.  When the SS has 
             successfully written the string to the underlying Socket it invokes the callback.  
             The parameters to the callback are true and the payload.
             
             If it is impossible to send because the underlying Socket has closed, the callback 
             is invoked with false and the payload as parameters.
            
             This method is non-blocking.  This means that it does not wait until the string
             has been sent before returning.  Instead, it arranges for the string to be sent
             and then returns.  When the send is completed (at some time in the future), the
             callback is called on another thread.
             
             This method is thread safe.  This means that multiple threads can call BeginSend
             on a shared socket without worrying around synchronization.  The implementation of
             BeginSend must take care of synchronization instead.  On a given SS, each
             string arriving via a BeginSend method call must be sent (in its entirety) before
             a later arriving string can be sent.
             </summary>
        </member>
        <member name="M:CustomNetworking.SS.ProcessSendQueue">
            <summary>
            This should be called only after a lock on sendRequests has been acquired.
            It pings back and forth with the BytesSent callback to send out all the strings in
            the queue.  This method gets the string at the front of the queue and attempts
            to send it.  BytesSent takes care of making sure all of the bytes are actually sent
            before calling this method again to send the next string. 
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.BytesSent(System.IAsyncResult)">
            <summary>
            This method is the callback used when bytes are being sent.  It makes sure that all of
            the bytes have been sent, then calls the appropriate callback and calls ProcessSendQueue.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.BeginReceive(CustomNetworking.ReceiveCallback,System.Object,System.Int32)">
             <summary>
             We can read a string from the SS by doing
             
                 ss.BeginReceive(callback, payload)
                 
             where callback is a ReceiveCallback (see below) and payload is an arbitrary object.
             This is non-blocking, asynchronous operation.  When the SS has read a
             string of text terminated by a newline character from the underlying Socket, it 
             invokes the callback.  The parameters to the callback are a string and the payload.  
             The string is the requested string (with the newline removed).
             
             Alternatively, we can read a string from the SS by doing
             
                 ss.BeginReceive(callback, payload, length)
                 
             If length is negative or zero, this behaves identically to the first case.  If length
             is positive, then it reads and decodes length bytes from the underlying Socket, yielding
             a string s.  The parameters to the callback are s and the payload
            
             In either case, if there are insufficient bytes to service a request because the underlying
             Socket has closed, the callback is invoked with null and the payload.
             
             This method is non-blocking.  This means that it does not wait until a line of text
             has been received before returning.  Instead, it arranges for a line to be received
             and then returns.  When the line is actually received (at some time in the future), the
             callback is called on another thread.
             
             This method is thread safe.  This means that multiple threads can call BeginReceive
             on a shared socket without worrying around synchronization.  The implementation of
             BeginReceive must take care of synchronization instead.  On a given SS, each
             arriving line of text must be passed to callbacks in the order in which the corresponding
             BeginReceive call arrived.
             
             Note that it is possible for there to be incoming bytes arriving at the underlying Socket
             even when there are no pending callbacks.  SS implementations should refrain
             from buffering an unbounded number of incoming bytes beyond what is required to service
             the pending callbacks.
             </summary>
        </member>
        <member name="M:CustomNetworking.SS.ProcessReceiveQueue">
            <summary>
            This  tries to fill requests with text on hand and then, if there are still
            requests remaining, requests more data from the underlying socket.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.ExtractChunk(System.Int32)">
            <summary>
            Extracts a string of the specified length from the queued lines plus the incomplete line.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.BytesReceived(System.IAsyncResult)">
            <summary>
            This private method is the callback for the receive attempts.
            </summary>
        </member>
        <member name="M:CustomNetworking.SS.Dispose">
            <summary>
            Frees resources associated with this SS.
            </summary>
        </member>
        <member name="T:CustomNetworking.SSClient">
            <summary>
            Represents client connections that use SSs.
            </summary>
        </member>
        <member name="M:CustomNetworking.SSClient.#ctor(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Creates a client communicating with the remote host via the given port
            using the provided encoding over a SS.
            </summary>
        </member>
        <member name="P:CustomNetworking.SSClient.Client">
            <summary>
            The SS over which the communication occurs.
            </summary>
        </member>
        <member name="T:CustomNetworking.SSCallback">
            <summary>
            The type of delegate that is called when a SSListener has
            opened a SS.
            </summary>
        </member>
        <member name="T:CustomNetworking.SSListener">
            <summary>
            A server capable of communicating with multiple remote clients over 
            a SS.
            </summary>
        </member>
        <member name="F:CustomNetworking.SSListener.tcpListener">
            <summary>
            The TcpListener that underlies this server
            </summary>
        </member>
        <member name="F:CustomNetworking.SSListener.encoding">
            <summary>
            The encoding being used
            </summary>
        </member>
        <member name="M:CustomNetworking.SSListener.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Creates a SSListener that listens for incoming connections on the
            specified port.  Uses the provided encoding for a SSs that are
            connected.
            </summary>
        </member>
        <member name="M:CustomNetworking.SSListener.BeginAcceptSS(CustomNetworking.SSCallback,System.Object)">
            <summary>
            Begins listening asynchonously for an incoming socket reqest.  When a
            SS is established, invokes the callback wih the SS
            and the payload as parameters.
            </summary>
        </member>
        <member name="M:CustomNetworking.SSListener.SocketAccepted(System.IAsyncResult)">
            <summary>
            Called when a Socket has been established as a result of a
            BeginAcceptSocket call.
            </summary>
        </member>
        <member name="M:CustomNetworking.SSListener.AcceptSS">
            <summary>
            Blocking call that obtains a SS connection.
            </summary>
        </member>
        <member name="M:CustomNetworking.SSListener.Start">
            <summary>
            Starts the server
            </summary>
        </member>
        <member name="M:CustomNetworking.SSListener.Stop">
            <summary>
            Stops the server
            </summary>
        </member>
    </members>
</doc>
